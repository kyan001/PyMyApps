# Configurator Attributes
[configurator]
# Configurator name, which is used to identify the configurator.
# If not provided, will use the folder basename as the configurator name.
name = "My Configurator"  # Optional

# Config files.
# The configurator will replace the destination config files with the source config files.
[[config]]  # Config file name and paths
# Config name, which is used to identify the config file.
# If not provided, will use the src file basename as the config name.
name = "My Config"  # Optional
# Source config file path, which should contain the new config.
# The folder contains configurator.toml considered as the `./` folder.
# e.g. `my.conf`, `./my.conf` or `./path/to/my.conf`
src = "my.conf"  # Required
# Destination config file path, which should be the path to the current config.
# If the path is existed, the configurator will backup the file before replacing it.
# If the path is not existed, the configurator will create the folders and file.
dst = "~/.my.comf"  # Required

[[config]]  # Multiple config files can be listed
# Both the source path and the destination path can be a command.
# The command will be executed and the output will be used as the source path.
src = "echo 'my.conf'"
dst = "cmd --config-file"

# Dependency packages
# The configurator will install the dependencies before replacing the config files.
[[install]]
# Package name. Used in installation.
name = "python3"  # Required
# Package command to test if the package is already installed.
# If not provided, will use the package name as the command.
cmd = "python3"  # Optional
# Package manager to install the package.
# If not provided, will use the default package manager, which is Scoop for Windows,Homebrew for macOS.
manager = "pip3"  # Optional

[[install]]  # Multiple dependencies can be listed
# Package name can be a table.
# The platform name as the key and the package name as the value.
# Platforms: `Windows`, `Darwin`, `Linux`, `FreeBSD`, etc. `*` is the default.
name = {"Windows" = "python", "Darwin"= "python", "*" = "python3"}
# Package manager can be a table.
# The platform name as the key and the package manager command as the value.
# Supported package manager: `scoop`, `choco`, `brew`, `port`, `apt`, `pip`, `pip3`.
manager = {"Windows" = "choco", "Darwin"= "port", "*" = "pip3"}
